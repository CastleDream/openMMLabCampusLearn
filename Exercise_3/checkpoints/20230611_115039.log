2023/06/11 11:50:40 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.12 (main, Jun  7 2023, 12:45:35) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 1080459298
    GPU 0: Tesla T4
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.11.0+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0+cu113
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1080459298
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/11 11:50:42 - mmengine - INFO - Config:
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=5),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=10, max_keep_ckpts=2,
        save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/rtmdet-ins_tiny_8xb32-300e_coco/rtmdet-ins_tiny_8xb32-300e_coco_20221130_151727-ec670f7e.pth'
resume = False
train_cfg = dict(
    type='EpochBasedTrainLoop',
    max_epochs=40,
    val_interval=10,
    dynamic_intervals=[(280, 1)])
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(type='LinearLR', start_factor=1e-05, by_epoch=False, begin=0, end=30),
    dict(
        type='CosineAnnealingLR',
        eta_min=3.125e-05,
        begin=20,
        end=40,
        T_max=20,
        by_epoch=True,
        convert_to_iter_based=True)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='AdamW', lr=0.000625, weight_decay=0.05),
    paramwise_cfg=dict(
        norm_decay_mult=0, bias_decay_mult=0, bypass_duplicate=True))
auto_scale_lr = dict(enable=False, base_batch_size=16)
dataset_type = 'CocoDataset'
data_root = '/content/balloon_dataset/balloon/'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        poly2mask=False),
    dict(
        type='CachedMosaic',
        img_scale=(640, 640),
        pad_val=114.0,
        max_cached_images=20,
        random_pop=False),
    dict(
        type='RandomResize',
        scale=(1280, 1280),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='CachedMixUp',
        img_scale=(640, 640),
        ratio_range=(1.0, 1.0),
        max_cached_images=10,
        random_pop=False,
        pad_val=(114, 114, 114),
        prob=0.5),
    dict(type='FilterAnnotations', min_gt_bbox_wh=(1, 1)),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(640, 640), keep_ratio=True),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=4,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=None,
    dataset=dict(
        type='CocoDataset',
        data_root='/content/balloon_dataset/balloon/',
        ann_file='train_coco.json',
        data_prefix=dict(img='train/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                poly2mask=False),
            dict(
                type='CachedMosaic',
                img_scale=(640, 640),
                pad_val=114.0,
                max_cached_images=20,
                random_pop=False),
            dict(
                type='RandomResize',
                scale=(1280, 1280),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='CachedMixUp',
                img_scale=(640, 640),
                ratio_range=(1.0, 1.0),
                max_cached_images=10,
                random_pop=False,
                pad_val=(114, 114, 114),
                prob=0.5),
            dict(type='FilterAnnotations', min_gt_bbox_wh=(1, 1)),
            dict(type='PackDetInputs')
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])),
    pin_memory=True)
val_dataloader = dict(
    batch_size=1,
    num_workers=1,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='/content/balloon_dataset/balloon/',
        ann_file='val_coco.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
test_dataloader = dict(
    batch_size=1,
    num_workers=1,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='/content/balloon_dataset/balloon/',
        ann_file='val_coco.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='/content/balloon_dataset/balloon/val_coco.json',
    metric=['bbox', 'segm'],
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
test_evaluator = dict(
    type='CocoMetric',
    ann_file='/content/balloon_dataset/balloon/val_coco.json',
    metric=['bbox', 'segm'],
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
tta_model = dict(
    type='DetTTAModel',
    tta_cfg=dict(nms=dict(type='nms', iou_threshold=0.6), max_per_img=100))
img_scales = [(640, 640), (320, 320), (960, 960)]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale': (640, 640),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (320, 320),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (960, 960),
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 1.0
                    }, {
                        'type': 'RandomFlip',
                        'prob': 0.0
                    }],
                    [{
                        'type': 'Pad',
                        'size': (960, 960),
                        'pad_val': {
                            'img': (114, 114, 114)
                        }
                    }],
                    [{
                        'type':
                        'PackDetInputs',
                        'meta_keys':
                        ('img_id', 'img_path', 'ori_shape', 'img_shape',
                         'scale_factor', 'flip', 'flip_direction')
                    }]])
]
model = dict(
    type='RTMDet',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[57.375, 57.12, 58.395],
        bgr_to_rgb=False,
        batch_augments=None),
    backbone=dict(
        type='CSPNeXt',
        arch='P5',
        expand_ratio=0.5,
        deepen_factor=0.167,
        widen_factor=0.375,
        channel_attention=True,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True),
        init_cfg=dict(
            type='Pretrained',
            prefix='backbone.',
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
        ),
        frozen_stages=4),
    neck=dict(
        type='CSPNeXtPAFPN',
        in_channels=[96, 192, 384],
        out_channels=96,
        num_csp_blocks=1,
        expand_ratio=0.5,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    bbox_head=dict(
        type='RTMDetInsSepBNHead',
        num_classes=1,
        in_channels=96,
        stacked_convs=2,
        share_conv=True,
        pred_kernel_size=1,
        feat_channels=96,
        act_cfg=dict(type='SiLU', inplace=True),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        anchor_generator=dict(
            type='MlvlPointGenerator', offset=0, strides=[8, 16, 32]),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        loss_cls=dict(
            type='QualityFocalLoss',
            use_sigmoid=True,
            beta=2.0,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),
        loss_mask=dict(
            type='DiceLoss', loss_weight=2.0, eps=5e-06, reduction='mean')),
    train_cfg=dict(
        assigner=dict(type='DynamicSoftLabelAssigner', topk=13),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.6),
        max_per_img=100,
        mask_thr_binary=0.5))
train_pipeline_stage2 = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        poly2mask=False),
    dict(
        type='RandomResize',
        scale=(640, 640),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(
        type='RandomCrop',
        crop_size=(640, 640),
        recompute_bbox=True,
        allow_negative_crop=True),
    dict(type='FilterAnnotations', min_gt_bbox_wh=(1, 1)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(type='PackDetInputs')
]
max_epochs = 40
stage2_num_epochs = 20
base_lr = 0.000625
interval = 10
custom_hooks = [
    dict(
        type='EMAHook',
        ema_type='ExpMomentumEMA',
        momentum=0.0002,
        update_buffers=True,
        priority=49),
    dict(
        type='PipelineSwitchHook',
        switch_epoch=35,
        switch_pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                poly2mask=False),
            dict(
                type='RandomResize',
                scale=(640, 640),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(
                type='RandomCrop',
                crop_size=(640, 640),
                recompute_bbox=True,
                allow_negative_crop=True),
            dict(type='FilterAnnotations', min_gt_bbox_wh=(1, 1)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(type='PackDetInputs')
        ])
]
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
train_batch_size_per_gpu = 4
train_num_workers = 2
val_batch_size_per_gpu = 1
val_num_workers = 1
num_classes = 1
num_epochs_stage2 = 5
metainfo = dict(classes=('balloon', ), palette=[(220, 20, 60)])
launcher = 'none'
work_dir = '/content/drive/MyDrive/OpenMMLab/workdir/rtmdet_tiny_balloon'

2023/06/11 11:50:50 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/11 11:50:50 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:51 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.0.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.0.0.bn is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.0.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.0.1.bn is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.1.0.bn is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.1.1.bn is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.2.0.bn is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - WARNING - bbox_head.reg_convs.2.1.bn is duplicate. It is skipped since bypass_duplicate=True
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.0.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.0.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.0.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.0.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.1.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.1.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.1.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.1.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.2.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.2.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.2.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.kernel_convs.2.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.rtm_kernel.0.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.rtm_kernel.1.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.rtm_kernel.2.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.mask_head.fusion_conv.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.mask_head.stacked_convs.0.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.mask_head.stacked_convs.0.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.mask_head.stacked_convs.1.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.mask_head.stacked_convs.1.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.mask_head.stacked_convs.2.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.mask_head.stacked_convs.2.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.mask_head.stacked_convs.3.bn.weight:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.mask_head.stacked_convs.3.bn.bias:weight_decay=0.0
2023/06/11 11:50:52 - mmengine - INFO - paramwise_options -- bbox_head.mask_head.projection.bias:weight_decay=0.0
2023/06/11 11:50:54 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.kernel_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.kernel_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.1.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.kernel_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.1.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.kernel_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.2.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.kernel_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.2.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.kernel_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.kernel_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_kernel.0.weight - torch.Size([169, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_kernel.0.bias - torch.Size([169]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_kernel.1.weight - torch.Size([169, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_kernel.1.bias - torch.Size([169]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_kernel.2.weight - torch.Size([169, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.rtm_kernel.2.bias - torch.Size([169]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.mask_head.fusion_conv.weight - torch.Size([96, 288, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.mask_head.fusion_conv.bias - torch.Size([96]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.mask_head.stacked_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.mask_head.stacked_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.mask_head.stacked_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.mask_head.stacked_convs.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.mask_head.stacked_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.mask_head.stacked_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.mask_head.stacked_convs.2.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.mask_head.stacked_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.mask_head.stacked_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.mask_head.stacked_convs.3.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.mask_head.stacked_convs.3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.mask_head.stacked_convs.3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.mask_head.projection.weight - torch.Size([8, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  

bbox_head.mask_head.projection.bias - torch.Size([8]): 
Initialized by user-defined `init_weights` in RTMDetInsSepBNHead  
2023/06/11 11:50:54 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/rtmdet-ins_tiny_8xb32-300e_coco/rtmdet-ins_tiny_8xb32-300e_coco_20221130_151727-ec670f7e.pth
2023/06/11 11:50:54 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/11 11:50:54 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/11 11:50:54 - mmengine - INFO - Checkpoints will be saved to /content/drive/MyDrive/OpenMMLab/workdir/rtmdet_tiny_balloon.
2023/06/11 11:50:59 - mmengine - INFO - Epoch(train)  [1][ 5/16]  lr: 8.6212e-05  eta: 0:09:45  time: 0.9216  data_time: 0.2306  memory: 1490  loss: 3.0623  loss_cls: 2.0060  loss_bbox: 0.7176  loss_mask: 0.3387
2023/06/11 11:51:02 - mmengine - INFO - Epoch(train)  [1][10/16]  lr: 1.9397e-04  eta: 0:08:17  time: 0.7901  data_time: 0.1196  memory: 1526  loss: 3.0713  loss_cls: 2.0441  loss_bbox: 0.7008  loss_mask: 0.3264
2023/06/11 11:51:03 - mmengine - INFO - Epoch(train)  [1][15/16]  lr: 3.0173e-04  eta: 0:06:29  time: 0.6238  data_time: 0.0816  memory: 1696  loss: 3.0453  loss_cls: 2.0673  loss_bbox: 0.6897  loss_mask: 0.2883
2023/06/11 11:51:03 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:51:06 - mmengine - INFO - Epoch(train)  [2][ 5/16]  lr: 4.3104e-04  eta: 0:06:02  time: 0.5860  data_time: 0.0870  memory: 1745  loss: 3.0525  loss_cls: 2.0901  loss_bbox: 0.6768  loss_mask: 0.2856
2023/06/11 11:51:08 - mmengine - INFO - Epoch(train)  [2][10/16]  lr: 5.3879e-04  eta: 0:05:31  time: 0.5398  data_time: 0.0724  memory: 1573  loss: 3.0465  loss_cls: 2.1080  loss_bbox: 0.6626  loss_mask: 0.2760
2023/06/11 11:51:10 - mmengine - INFO - Epoch(train)  [2][15/16]  lr: 6.2500e-04  eta: 0:05:06  time: 0.5033  data_time: 0.0613  memory: 1769  loss: 3.0334  loss_cls: 2.1276  loss_bbox: 0.6387  loss_mask: 0.2671
2023/06/11 11:51:10 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:51:13 - mmengine - INFO - Epoch(train)  [3][ 5/16]  lr: 6.2500e-04  eta: 0:05:14  time: 0.5210  data_time: 0.0664  memory: 2026  loss: 2.9590  loss_cls: 2.0898  loss_bbox: 0.6160  loss_mask: 0.2532
2023/06/11 11:51:17 - mmengine - INFO - Epoch(train)  [3][10/16]  lr: 6.2500e-04  eta: 0:05:21  time: 0.5371  data_time: 0.0600  memory: 1795  loss: 2.8453  loss_cls: 2.0070  loss_bbox: 0.5999  loss_mask: 0.2384
2023/06/11 11:51:19 - mmengine - INFO - Epoch(train)  [3][15/16]  lr: 6.2500e-04  eta: 0:05:14  time: 0.5298  data_time: 0.0542  memory: 1553  loss: 2.7120  loss_cls: 1.8909  loss_bbox: 0.5889  loss_mask: 0.2322
2023/06/11 11:51:19 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:51:23 - mmengine - INFO - Epoch(train)  [4][ 5/16]  lr: 6.2500e-04  eta: 0:05:26  time: 0.5225  data_time: 0.0463  memory: 2552  loss: 2.5311  loss_cls: 1.7554  loss_bbox: 0.5626  loss_mask: 0.2131
2023/06/11 11:51:26 - mmengine - INFO - Epoch(train)  [4][10/16]  lr: 6.2500e-04  eta: 0:05:16  time: 0.5000  data_time: 0.0463  memory: 1595  loss: 2.3554  loss_cls: 1.6217  loss_bbox: 0.5357  loss_mask: 0.1980
2023/06/11 11:51:27 - mmengine - INFO - Epoch(train)  [4][15/16]  lr: 6.2500e-04  eta: 0:05:00  time: 0.4781  data_time: 0.0461  memory: 1474  loss: 2.1641  loss_cls: 1.4662  loss_bbox: 0.5059  loss_mask: 0.1920
2023/06/11 11:51:27 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:51:30 - mmengine - INFO - Epoch(train)  [5][ 5/16]  lr: 6.2500e-04  eta: 0:04:57  time: 0.4908  data_time: 0.0446  memory: 2303  loss: 1.9443  loss_cls: 1.2892  loss_bbox: 0.4780  loss_mask: 0.1770
2023/06/11 11:51:32 - mmengine - INFO - Epoch(train)  [5][10/16]  lr: 6.2500e-04  eta: 0:04:47  time: 0.4865  data_time: 0.0439  memory: 1573  loss: 1.7919  loss_cls: 1.1705  loss_bbox: 0.4582  loss_mask: 0.1632
2023/06/11 11:51:33 - mmengine - INFO - Epoch(train)  [5][15/16]  lr: 6.2500e-04  eta: 0:04:37  time: 0.4799  data_time: 0.0438  memory: 1599  loss: 1.6079  loss_cls: 1.0109  loss_bbox: 0.4433  loss_mask: 0.1536
2023/06/11 11:51:33 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:51:38 - mmengine - INFO - Epoch(train)  [6][ 5/16]  lr: 6.2500e-04  eta: 0:04:45  time: 0.5156  data_time: 0.0626  memory: 1515  loss: 1.4072  loss_cls: 0.8366  loss_bbox: 0.4263  loss_mask: 0.1444
2023/06/11 11:51:41 - mmengine - INFO - Epoch(train)  [6][10/16]  lr: 6.2500e-04  eta: 0:04:47  time: 0.5130  data_time: 0.0623  memory: 1701  loss: 1.2660  loss_cls: 0.7190  loss_bbox: 0.4089  loss_mask: 0.1381
2023/06/11 11:51:43 - mmengine - INFO - Epoch(train)  [6][15/16]  lr: 6.2500e-04  eta: 0:04:41  time: 0.4974  data_time: 0.0621  memory: 2014  loss: 1.1905  loss_cls: 0.6671  loss_bbox: 0.3887  loss_mask: 0.1348
2023/06/11 11:51:43 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:51:46 - mmengine - INFO - Epoch(train)  [7][ 5/16]  lr: 6.2500e-04  eta: 0:04:36  time: 0.4737  data_time: 0.0549  memory: 1536  loss: 1.1352  loss_cls: 0.6182  loss_bbox: 0.3792  loss_mask: 0.1378
2023/06/11 11:51:48 - mmengine - INFO - Epoch(train)  [7][10/16]  lr: 6.2500e-04  eta: 0:04:32  time: 0.4657  data_time: 0.0546  memory: 2176  loss: 1.0759  loss_cls: 0.5847  loss_bbox: 0.3620  loss_mask: 0.1292
2023/06/11 11:51:49 - mmengine - INFO - Epoch(train)  [7][15/16]  lr: 6.2500e-04  eta: 0:04:23  time: 0.4592  data_time: 0.0542  memory: 1423  loss: 1.0415  loss_cls: 0.5656  loss_bbox: 0.3517  loss_mask: 0.1241
2023/06/11 11:51:49 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:51:52 - mmengine - INFO - Epoch(train)  [8][ 5/16]  lr: 6.2500e-04  eta: 0:04:20  time: 0.4645  data_time: 0.0548  memory: 1572  loss: 1.0320  loss_cls: 0.5643  loss_bbox: 0.3453  loss_mask: 0.1224
2023/06/11 11:51:55 - mmengine - INFO - Epoch(train)  [8][10/16]  lr: 6.2500e-04  eta: 0:04:18  time: 0.4796  data_time: 0.0555  memory: 1348  loss: 0.9640  loss_cls: 0.5126  loss_bbox: 0.3331  loss_mask: 0.1184
2023/06/11 11:51:57 - mmengine - INFO - Epoch(train)  [8][15/16]  lr: 6.2500e-04  eta: 0:04:14  time: 0.4895  data_time: 0.0559  memory: 1410  loss: 0.9438  loss_cls: 0.4953  loss_bbox: 0.3267  loss_mask: 0.1217
2023/06/11 11:51:57 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:52:01 - mmengine - INFO - Epoch(train)  [9][ 5/16]  lr: 6.2500e-04  eta: 0:04:16  time: 0.4953  data_time: 0.0445  memory: 1620  loss: 0.9111  loss_cls: 0.4805  loss_bbox: 0.3156  loss_mask: 0.1150
2023/06/11 11:52:04 - mmengine - INFO - Epoch(train)  [9][10/16]  lr: 6.2500e-04  eta: 0:04:15  time: 0.4941  data_time: 0.0440  memory: 2504  loss: 0.9221  loss_cls: 0.4860  loss_bbox: 0.3167  loss_mask: 0.1193
2023/06/11 11:52:06 - mmengine - INFO - Epoch(train)  [9][15/16]  lr: 6.2500e-04  eta: 0:04:09  time: 0.4651  data_time: 0.0438  memory: 1785  loss: 0.9225  loss_cls: 0.4820  loss_bbox: 0.3184  loss_mask: 0.1221
2023/06/11 11:52:06 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:52:09 - mmengine - INFO - Epoch(train) [10][ 5/16]  lr: 6.2500e-04  eta: 0:04:05  time: 0.4701  data_time: 0.0443  memory: 1826  loss: 0.9020  loss_cls: 0.4723  loss_bbox: 0.3139  loss_mask: 0.1158
2023/06/11 11:52:11 - mmengine - INFO - Epoch(train) [10][10/16]  lr: 6.2500e-04  eta: 0:04:02  time: 0.4711  data_time: 0.0473  memory: 1577  loss: 0.9020  loss_cls: 0.4700  loss_bbox: 0.3157  loss_mask: 0.1163
2023/06/11 11:52:12 - mmengine - INFO - Epoch(train) [10][15/16]  lr: 6.2500e-04  eta: 0:03:56  time: 0.4631  data_time: 0.0475  memory: 1268  loss: 0.8895  loss_cls: 0.4629  loss_bbox: 0.3134  loss_mask: 0.1132
2023/06/11 11:52:12 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:52:12 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/06/11 11:52:22 - mmengine - INFO - Epoch(val) [10][ 5/13]    eta: 0:00:11  time: 1.4698  data_time: 0.0422  memory: 3072  
2023/06/11 11:52:23 - mmengine - INFO - Epoch(val) [10][10/13]    eta: 0:00:02  time: 0.8499  data_time: 0.0224  memory: 876  
2023/06/11 11:52:24 - mmengine - INFO - Evaluating bbox...
2023/06/11 11:52:24 - mmengine - INFO - bbox_mAP_copypaste: 0.592 0.780 0.691 0.000 0.413 0.687
2023/06/11 11:52:24 - mmengine - INFO - Evaluating segm...
2023/06/11 11:52:24 - mmengine - INFO - segm_mAP_copypaste: 0.526 0.614 0.611 0.000 0.221 0.681
2023/06/11 11:52:24 - mmengine - INFO - Epoch(val) [10][13/13]    coco/bbox_mAP: 0.5920  coco/bbox_mAP_50: 0.7800  coco/bbox_mAP_75: 0.6910  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4130  coco/bbox_mAP_l: 0.6870  coco/segm_mAP: 0.5260  coco/segm_mAP_50: 0.6140  coco/segm_mAP_75: 0.6110  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.2210  coco/segm_mAP_l: 0.6810  data_time: 0.0177  time: 0.7087
2023/06/11 11:52:25 - mmengine - INFO - The best checkpoint with 0.5920 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2023/06/11 11:52:30 - mmengine - INFO - Epoch(train) [11][ 5/16]  lr: 6.2500e-04  eta: 0:03:53  time: 0.4746  data_time: 0.0506  memory: 1722  loss: 0.8671  loss_cls: 0.4445  loss_bbox: 0.3095  loss_mask: 0.1132
2023/06/11 11:52:32 - mmengine - INFO - Epoch(train) [11][10/16]  lr: 6.2500e-04  eta: 0:03:51  time: 0.4784  data_time: 0.0499  memory: 1788  loss: 0.8392  loss_cls: 0.4227  loss_bbox: 0.3044  loss_mask: 0.1121
2023/06/11 11:52:35 - mmengine - INFO - Epoch(train) [11][15/16]  lr: 6.2500e-04  eta: 0:03:48  time: 0.4688  data_time: 0.0498  memory: 1762  loss: 0.8275  loss_cls: 0.4173  loss_bbox: 0.2993  loss_mask: 0.1109
2023/06/11 11:52:35 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:52:39 - mmengine - INFO - Epoch(train) [12][ 5/16]  lr: 6.2500e-04  eta: 0:03:49  time: 0.4958  data_time: 0.0505  memory: 2071  loss: 0.8076  loss_cls: 0.3998  loss_bbox: 0.2958  loss_mask: 0.1120
2023/06/11 11:52:42 - mmengine - INFO - Epoch(train) [12][10/16]  lr: 6.2500e-04  eta: 0:03:48  time: 0.4880  data_time: 0.0507  memory: 1510  loss: 0.7940  loss_cls: 0.3891  loss_bbox: 0.2921  loss_mask: 0.1128
2023/06/11 11:52:44 - mmengine - INFO - Epoch(train) [12][15/16]  lr: 6.2500e-04  eta: 0:03:42  time: 0.4699  data_time: 0.0506  memory: 1358  loss: 0.7635  loss_cls: 0.3732  loss_bbox: 0.2840  loss_mask: 0.1063
2023/06/11 11:52:44 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:52:46 - mmengine - INFO - Epoch(train) [13][ 5/16]  lr: 6.2500e-04  eta: 0:03:39  time: 0.4755  data_time: 0.0519  memory: 1834  loss: 0.7424  loss_cls: 0.3627  loss_bbox: 0.2783  loss_mask: 0.1014
2023/06/11 11:52:49 - mmengine - INFO - Epoch(train) [13][10/16]  lr: 6.2500e-04  eta: 0:03:36  time: 0.4791  data_time: 0.0494  memory: 2118  loss: 0.7414  loss_cls: 0.3620  loss_bbox: 0.2760  loss_mask: 0.1033
2023/06/11 11:52:50 - mmengine - INFO - Epoch(train) [13][15/16]  lr: 6.2500e-04  eta: 0:03:31  time: 0.4712  data_time: 0.0493  memory: 1989  loss: 0.7314  loss_cls: 0.3575  loss_bbox: 0.2715  loss_mask: 0.1025
2023/06/11 11:52:50 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:52:53 - mmengine - INFO - Epoch(train) [14][ 5/16]  lr: 6.2500e-04  eta: 0:03:28  time: 0.4816  data_time: 0.0487  memory: 1311  loss: 0.7269  loss_cls: 0.3571  loss_bbox: 0.2688  loss_mask: 0.1010
2023/06/11 11:52:57 - mmengine - INFO - Epoch(train) [14][10/16]  lr: 6.2500e-04  eta: 0:03:28  time: 0.5117  data_time: 0.0497  memory: 1697  loss: 0.7183  loss_cls: 0.3499  loss_bbox: 0.2655  loss_mask: 0.1029
2023/06/11 11:52:59 - mmengine - INFO - Epoch(train) [14][15/16]  lr: 6.2500e-04  eta: 0:03:26  time: 0.5014  data_time: 0.0501  memory: 1933  loss: 0.7004  loss_cls: 0.3382  loss_bbox: 0.2620  loss_mask: 0.1002
2023/06/11 11:52:59 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:53:03 - mmengine - INFO - Epoch(train) [15][ 5/16]  lr: 6.2500e-04  eta: 0:03:24  time: 0.5014  data_time: 0.0483  memory: 1769  loss: 0.7025  loss_cls: 0.3375  loss_bbox: 0.2631  loss_mask: 0.1019
2023/06/11 11:53:05 - mmengine - INFO - Epoch(train) [15][10/16]  lr: 6.2500e-04  eta: 0:03:21  time: 0.4761  data_time: 0.0478  memory: 2056  loss: 0.7199  loss_cls: 0.3472  loss_bbox: 0.2669  loss_mask: 0.1058
2023/06/11 11:53:07 - mmengine - INFO - Epoch(train) [15][15/16]  lr: 6.2500e-04  eta: 0:03:17  time: 0.4719  data_time: 0.0474  memory: 2211  loss: 0.7278  loss_cls: 0.3483  loss_bbox: 0.2697  loss_mask: 0.1098
2023/06/11 11:53:07 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:53:10 - mmengine - INFO - Epoch(train) [16][ 5/16]  lr: 6.2500e-04  eta: 0:03:14  time: 0.4796  data_time: 0.0485  memory: 2020  loss: 0.7436  loss_cls: 0.3586  loss_bbox: 0.2695  loss_mask: 0.1155
2023/06/11 11:53:12 - mmengine - INFO - Epoch(train) [16][10/16]  lr: 6.2500e-04  eta: 0:03:11  time: 0.4875  data_time: 0.0478  memory: 2173  loss: 0.7396  loss_cls: 0.3547  loss_bbox: 0.2679  loss_mask: 0.1170
2023/06/11 11:53:14 - mmengine - INFO - Epoch(train) [16][15/16]  lr: 6.2500e-04  eta: 0:03:08  time: 0.4806  data_time: 0.0475  memory: 1715  loss: 0.7431  loss_cls: 0.3679  loss_bbox: 0.2617  loss_mask: 0.1134
2023/06/11 11:53:14 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:53:18 - mmengine - INFO - Epoch(train) [17][ 5/16]  lr: 6.2500e-04  eta: 0:03:08  time: 0.5283  data_time: 0.0634  memory: 1608  loss: 0.7231  loss_cls: 0.3502  loss_bbox: 0.2591  loss_mask: 0.1138
2023/06/11 11:53:22 - mmengine - INFO - Epoch(train) [17][10/16]  lr: 6.2500e-04  eta: 0:03:07  time: 0.5303  data_time: 0.0633  memory: 2093  loss: 0.7232  loss_cls: 0.3554  loss_bbox: 0.2570  loss_mask: 0.1109
2023/06/11 11:53:24 - mmengine - INFO - Epoch(train) [17][15/16]  lr: 6.2500e-04  eta: 0:03:03  time: 0.5132  data_time: 0.0621  memory: 2120  loss: 0.7355  loss_cls: 0.3609  loss_bbox: 0.2602  loss_mask: 0.1144
2023/06/11 11:53:24 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:53:27 - mmengine - INFO - Epoch(train) [18][ 5/16]  lr: 6.2500e-04  eta: 0:03:00  time: 0.4963  data_time: 0.0606  memory: 1539  loss: 0.7235  loss_cls: 0.3525  loss_bbox: 0.2591  loss_mask: 0.1119
2023/06/11 11:53:29 - mmengine - INFO - Epoch(train) [18][10/16]  lr: 6.2500e-04  eta: 0:02:57  time: 0.4974  data_time: 0.0598  memory: 1993  loss: 0.7220  loss_cls: 0.3520  loss_bbox: 0.2580  loss_mask: 0.1120
2023/06/11 11:53:30 - mmengine - INFO - Epoch(train) [18][15/16]  lr: 6.2500e-04  eta: 0:02:54  time: 0.4825  data_time: 0.0597  memory: 2123  loss: 0.6756  loss_cls: 0.3245  loss_bbox: 0.2471  loss_mask: 0.1040
2023/06/11 11:53:31 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:53:33 - mmengine - INFO - Epoch(train) [19][ 5/16]  lr: 6.2500e-04  eta: 0:02:51  time: 0.4901  data_time: 0.0580  memory: 1774  loss: 0.6557  loss_cls: 0.3111  loss_bbox: 0.2442  loss_mask: 0.1004
2023/06/11 11:53:37 - mmengine - INFO - Epoch(train) [19][10/16]  lr: 6.2500e-04  eta: 0:02:49  time: 0.5147  data_time: 0.0588  memory: 1814  loss: 0.6436  loss_cls: 0.3018  loss_bbox: 0.2425  loss_mask: 0.0993
2023/06/11 11:53:39 - mmengine - INFO - Epoch(train) [19][15/16]  lr: 6.2500e-04  eta: 0:02:47  time: 0.5210  data_time: 0.0589  memory: 1808  loss: 0.6228  loss_cls: 0.2793  loss_bbox: 0.2429  loss_mask: 0.1005
2023/06/11 11:53:39 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:53:44 - mmengine - INFO - Epoch(train) [20][ 5/16]  lr: 6.2500e-04  eta: 0:02:45  time: 0.5363  data_time: 0.0526  memory: 1999  loss: 0.6457  loss_cls: 0.2924  loss_bbox: 0.2488  loss_mask: 0.1044
2023/06/11 11:53:46 - mmengine - INFO - Epoch(train) [20][10/16]  lr: 6.2500e-04  eta: 0:02:43  time: 0.5107  data_time: 0.0493  memory: 2504  loss: 0.6391  loss_cls: 0.2871  loss_bbox: 0.2471  loss_mask: 0.1048
2023/06/11 11:53:48 - mmengine - INFO - Epoch(train) [20][15/16]  lr: 6.2500e-04  eta: 0:02:40  time: 0.4932  data_time: 0.0487  memory: 2095  loss: 0.6279  loss_cls: 0.2799  loss_bbox: 0.2453  loss_mask: 0.1028
2023/06/11 11:53:48 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:53:48 - mmengine - INFO - Saving checkpoint at 20 epochs
2023/06/11 11:53:56 - mmengine - INFO - Epoch(val) [20][ 5/13]    eta: 0:00:10  time: 0.8739  data_time: 0.0213  memory: 2700  
2023/06/11 11:53:58 - mmengine - INFO - Epoch(val) [20][10/13]    eta: 0:00:02  time: 0.7555  data_time: 0.0183  memory: 876  
2023/06/11 11:53:59 - mmengine - INFO - Evaluating bbox...
2023/06/11 11:53:59 - mmengine - INFO - bbox_mAP_copypaste: 0.661 0.816 0.708 0.000 0.373 0.790
2023/06/11 11:53:59 - mmengine - INFO - Evaluating segm...
2023/06/11 11:54:00 - mmengine - INFO - segm_mAP_copypaste: 0.568 0.668 0.607 0.000 0.187 0.725
2023/06/11 11:54:00 - mmengine - INFO - Epoch(val) [20][13/13]    coco/bbox_mAP: 0.6610  coco/bbox_mAP_50: 0.8160  coco/bbox_mAP_75: 0.7080  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3730  coco/bbox_mAP_l: 0.7900  coco/segm_mAP: 0.5680  coco/segm_mAP_50: 0.6680  coco/segm_mAP_75: 0.6070  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.1870  coco/segm_mAP_l: 0.7250  data_time: 0.0148  time: 0.6873
2023/06/11 11:54:00 - mmengine - INFO - The previous best checkpoint /content/drive/MyDrive/OpenMMLab/workdir/rtmdet_tiny_balloon/best_coco_bbox_mAP_epoch_10.pth is removed
2023/06/11 11:54:02 - mmengine - INFO - The best checkpoint with 0.6610 coco/bbox_mAP at 20 epoch is saved to best_coco_bbox_mAP_epoch_20.pth.
2023/06/11 11:54:08 - mmengine - INFO - Epoch(train) [21][ 5/16]  lr: 6.2477e-04  eta: 0:02:38  time: 0.5375  data_time: 0.0603  memory: 1515  loss: 0.6567  loss_cls: 0.3070  loss_bbox: 0.2454  loss_mask: 0.1043
2023/06/11 11:54:13 - mmengine - INFO - Epoch(train) [21][10/16]  lr: 6.2384e-04  eta: 0:02:38  time: 0.5899  data_time: 0.0701  memory: 2470  loss: 0.6671  loss_cls: 0.3175  loss_bbox: 0.2452  loss_mask: 0.1045
2023/06/11 11:54:16 - mmengine - INFO - Epoch(train) [21][15/16]  lr: 6.2220e-04  eta: 0:02:36  time: 0.6081  data_time: 0.0721  memory: 1325  loss: 0.6763  loss_cls: 0.3224  loss_bbox: 0.2466  loss_mask: 0.1074
2023/06/11 11:54:16 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:54:22 - mmengine - INFO - Epoch(train) [22][ 5/16]  lr: 6.1930e-04  eta: 0:02:36  time: 0.6913  data_time: 0.0873  memory: 1685  loss: 0.6932  loss_cls: 0.3336  loss_bbox: 0.2506  loss_mask: 0.1090
2023/06/11 11:54:26 - mmengine - INFO - Epoch(train) [22][10/16]  lr: 6.1610e-04  eta: 0:02:34  time: 0.6943  data_time: 0.0874  memory: 1470  loss: 0.6975  loss_cls: 0.3345  loss_bbox: 0.2533  loss_mask: 0.1097
2023/06/11 11:54:27 - mmengine - INFO - Epoch(train) [22][15/16]  lr: 6.1222e-04  eta: 0:02:30  time: 0.6679  data_time: 0.0867  memory: 1297  loss: 0.7048  loss_cls: 0.3405  loss_bbox: 0.2555  loss_mask: 0.1088
2023/06/11 11:54:27 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:54:30 - mmengine - INFO - Epoch(train) [23][ 5/16]  lr: 6.0665e-04  eta: 0:02:27  time: 0.6492  data_time: 0.0756  memory: 1663  loss: 0.6989  loss_cls: 0.3370  loss_bbox: 0.2557  loss_mask: 0.1062
2023/06/11 11:54:32 - mmengine - INFO - Epoch(train) [23][10/16]  lr: 6.0127e-04  eta: 0:02:24  time: 0.6311  data_time: 0.0755  memory: 1645  loss: 0.7091  loss_cls: 0.3385  loss_bbox: 0.2591  loss_mask: 0.1114
2023/06/11 11:54:35 - mmengine - INFO - Epoch(train) [23][15/16]  lr: 5.9524e-04  eta: 0:02:21  time: 0.6359  data_time: 0.0756  memory: 1843  loss: 0.7243  loss_cls: 0.3439  loss_bbox: 0.2636  loss_mask: 0.1167
2023/06/11 11:54:35 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:54:40 - mmengine - INFO - Epoch(train) [24][ 5/16]  lr: 5.8715e-04  eta: 0:02:19  time: 0.6585  data_time: 0.0733  memory: 1464  loss: 0.7012  loss_cls: 0.3175  loss_bbox: 0.2650  loss_mask: 0.1188
2023/06/11 11:54:44 - mmengine - INFO - Epoch(train) [24][10/16]  lr: 5.7972e-04  eta: 0:02:18  time: 0.6486  data_time: 0.0656  memory: 1928  loss: 0.6902  loss_cls: 0.3115  loss_bbox: 0.2623  loss_mask: 0.1163
2023/06/11 11:54:46 - mmengine - INFO - Epoch(train) [24][15/16]  lr: 5.7168e-04  eta: 0:02:15  time: 0.6203  data_time: 0.0636  memory: 2250  loss: 0.6816  loss_cls: 0.3011  loss_bbox: 0.2627  loss_mask: 0.1178
2023/06/11 11:54:46 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:54:49 - mmengine - INFO - Epoch(train) [25][ 5/16]  lr: 5.6127e-04  eta: 0:02:12  time: 0.5733  data_time: 0.0535  memory: 2162  loss: 0.6709  loss_cls: 0.2902  loss_bbox: 0.2651  loss_mask: 0.1156
2023/06/11 11:54:51 - mmengine - INFO - Epoch(train) [25][10/16]  lr: 5.5197e-04  eta: 0:02:09  time: 0.5356  data_time: 0.0529  memory: 1554  loss: 0.6732  loss_cls: 0.2919  loss_bbox: 0.2631  loss_mask: 0.1182
2023/06/11 11:54:53 - mmengine - INFO - Epoch(train) [25][15/16]  lr: 5.4213e-04  eta: 0:02:05  time: 0.5138  data_time: 0.0526  memory: 1756  loss: 0.6632  loss_cls: 0.2872  loss_bbox: 0.2595  loss_mask: 0.1165
2023/06/11 11:54:53 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:54:55 - mmengine - INFO - Epoch(train) [26][ 5/16]  lr: 5.2964e-04  eta: 0:02:02  time: 0.5250  data_time: 0.0566  memory: 1887  loss: 0.6571  loss_cls: 0.2877  loss_bbox: 0.2529  loss_mask: 0.1164
2023/06/11 11:54:58 - mmengine - INFO - Epoch(train) [26][10/16]  lr: 5.1870e-04  eta: 0:02:00  time: 0.5321  data_time: 0.0570  memory: 1754  loss: 0.6441  loss_cls: 0.2823  loss_bbox: 0.2502  loss_mask: 0.1116
2023/06/11 11:55:01 - mmengine - INFO - Epoch(train) [26][15/16]  lr: 5.0731e-04  eta: 0:01:57  time: 0.5356  data_time: 0.0572  memory: 1945  loss: 0.6195  loss_cls: 0.2724  loss_bbox: 0.2435  loss_mask: 0.1036
2023/06/11 11:55:01 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:55:05 - mmengine - INFO - Epoch(train) [27][ 5/16]  lr: 4.9306e-04  eta: 0:01:54  time: 0.5459  data_time: 0.0592  memory: 1957  loss: 0.6159  loss_cls: 0.2724  loss_bbox: 0.2418  loss_mask: 0.1017
2023/06/11 11:55:08 - mmengine - INFO - Epoch(train) [27][10/16]  lr: 4.8075e-04  eta: 0:01:52  time: 0.5076  data_time: 0.0565  memory: 1895  loss: 0.6062  loss_cls: 0.2624  loss_bbox: 0.2415  loss_mask: 0.1023
2023/06/11 11:55:09 - mmengine - INFO - Epoch(train) [27][15/16]  lr: 4.6807e-04  eta: 0:01:48  time: 0.4706  data_time: 0.0533  memory: 1740  loss: 0.6131  loss_cls: 0.2655  loss_bbox: 0.2425  loss_mask: 0.1052
2023/06/11 11:55:09 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:55:12 - mmengine - INFO - Epoch(train) [28][ 5/16]  lr: 4.5241e-04  eta: 0:01:45  time: 0.4812  data_time: 0.0573  memory: 1605  loss: 0.6093  loss_cls: 0.2679  loss_bbox: 0.2394  loss_mask: 0.1020
2023/06/11 11:55:14 - mmengine - INFO - Epoch(train) [28][10/16]  lr: 4.3904e-04  eta: 0:01:42  time: 0.4776  data_time: 0.0570  memory: 1713  loss: 0.6215  loss_cls: 0.2711  loss_bbox: 0.2416  loss_mask: 0.1089
2023/06/11 11:55:16 - mmengine - INFO - Epoch(train) [28][15/16]  lr: 4.2539e-04  eta: 0:01:39  time: 0.4741  data_time: 0.0567  memory: 2263  loss: 0.6214  loss_cls: 0.2708  loss_bbox: 0.2417  loss_mask: 0.1088
2023/06/11 11:55:16 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:55:20 - mmengine - INFO - Epoch(train) [29][ 5/16]  lr: 4.0871e-04  eta: 0:01:37  time: 0.5139  data_time: 0.0744  memory: 1600  loss: 0.6225  loss_cls: 0.2674  loss_bbox: 0.2445  loss_mask: 0.1106
2023/06/11 11:55:23 - mmengine - INFO - Epoch(train) [29][10/16]  lr: 3.9459e-04  eta: 0:01:35  time: 0.5228  data_time: 0.0793  memory: 1694  loss: 0.6244  loss_cls: 0.2737  loss_bbox: 0.2398  loss_mask: 0.1108
2023/06/11 11:55:26 - mmengine - INFO - Epoch(train) [29][15/16]  lr: 3.8031e-04  eta: 0:01:32  time: 0.5194  data_time: 0.0792  memory: 1606  loss: 0.6329  loss_cls: 0.2743  loss_bbox: 0.2420  loss_mask: 0.1166
2023/06/11 11:55:26 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:55:29 - mmengine - INFO - Epoch(train) [30][ 5/16]  lr: 3.6302e-04  eta: 0:01:29  time: 0.4965  data_time: 0.0777  memory: 1393  loss: 0.6296  loss_cls: 0.2708  loss_bbox: 0.2406  loss_mask: 0.1182
2023/06/11 11:55:31 - mmengine - INFO - Epoch(train) [30][10/16]  lr: 3.4851e-04  eta: 0:01:26  time: 0.4826  data_time: 0.0769  memory: 2216  loss: 0.6220  loss_cls: 0.2684  loss_bbox: 0.2379  loss_mask: 0.1157
2023/06/11 11:55:33 - mmengine - INFO - Epoch(train) [30][15/16]  lr: 3.3395e-04  eta: 0:01:23  time: 0.4802  data_time: 0.0766  memory: 2238  loss: 0.6132  loss_cls: 0.2649  loss_bbox: 0.2356  loss_mask: 0.1126
2023/06/11 11:55:33 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:55:33 - mmengine - INFO - Saving checkpoint at 30 epochs
2023/06/11 11:55:40 - mmengine - INFO - Epoch(val) [30][ 5/13]    eta: 0:00:09  time: 0.7865  data_time: 0.0162  memory: 3196  
2023/06/11 11:55:42 - mmengine - INFO - Epoch(val) [30][10/13]    eta: 0:00:02  time: 0.7141  data_time: 0.0146  memory: 873  
2023/06/11 11:55:42 - mmengine - INFO - Evaluating bbox...
2023/06/11 11:55:43 - mmengine - INFO - bbox_mAP_copypaste: 0.649 0.815 0.746 0.000 0.540 0.739
2023/06/11 11:55:43 - mmengine - INFO - Evaluating segm...
2023/06/11 11:55:43 - mmengine - INFO - segm_mAP_copypaste: 0.558 0.660 0.607 0.000 0.241 0.714
2023/06/11 11:55:43 - mmengine - INFO - Epoch(val) [30][13/13]    coco/bbox_mAP: 0.6490  coco/bbox_mAP_50: 0.8150  coco/bbox_mAP_75: 0.7460  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.5400  coco/bbox_mAP_l: 0.7390  coco/segm_mAP: 0.5580  coco/segm_mAP_50: 0.6600  coco/segm_mAP_75: 0.6070  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.2410  coco/segm_mAP_l: 0.7140  data_time: 0.0070  time: 0.6105
2023/06/11 11:55:47 - mmengine - INFO - Epoch(train) [31][ 5/16]  lr: 3.1647e-04  eta: 0:01:20  time: 0.5145  data_time: 0.0808  memory: 2148  loss: 0.6091  loss_cls: 0.2613  loss_bbox: 0.2347  loss_mask: 0.1131
2023/06/11 11:55:49 - mmengine - INFO - Epoch(train) [31][10/16]  lr: 3.0193e-04  eta: 0:01:17  time: 0.5093  data_time: 0.0811  memory: 2093  loss: 0.5952  loss_cls: 0.2572  loss_bbox: 0.2299  loss_mask: 0.1081
2023/06/11 11:55:51 - mmengine - INFO - Epoch(train) [31][15/16]  lr: 2.8745e-04  eta: 0:01:14  time: 0.5010  data_time: 0.0812  memory: 1425  loss: 0.5828  loss_cls: 0.2536  loss_bbox: 0.2234  loss_mask: 0.1057
2023/06/11 11:55:51 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:55:53 - mmengine - INFO - Epoch(train) [32][ 5/16]  lr: 2.7021e-04  eta: 0:01:11  time: 0.4788  data_time: 0.0656  memory: 1412  loss: 0.5633  loss_cls: 0.2415  loss_bbox: 0.2188  loss_mask: 0.1030
2023/06/11 11:55:55 - mmengine - INFO - Epoch(train) [32][10/16]  lr: 2.5599e-04  eta: 0:01:08  time: 0.4464  data_time: 0.0542  memory: 1523  loss: 0.5561  loss_cls: 0.2377  loss_bbox: 0.2171  loss_mask: 0.1013
2023/06/11 11:55:57 - mmengine - INFO - Epoch(train) [32][15/16]  lr: 2.4195e-04  eta: 0:01:06  time: 0.4247  data_time: 0.0535  memory: 1791  loss: 0.5322  loss_cls: 0.2242  loss_bbox: 0.2146  loss_mask: 0.0934
2023/06/11 11:55:57 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:56:02 - mmengine - INFO - Epoch(train) [33][ 5/16]  lr: 2.2537e-04  eta: 0:01:03  time: 0.4711  data_time: 0.0583  memory: 2210  loss: 0.5392  loss_cls: 0.2280  loss_bbox: 0.2154  loss_mask: 0.0957
2023/06/11 11:56:05 - mmengine - INFO - Epoch(train) [33][10/16]  lr: 2.1183e-04  eta: 0:01:01  time: 0.4944  data_time: 0.0564  memory: 2338  loss: 0.5549  loss_cls: 0.2353  loss_bbox: 0.2201  loss_mask: 0.0994
2023/06/11 11:56:07 - mmengine - INFO - Epoch(train) [33][15/16]  lr: 1.9857e-04  eta: 0:00:58  time: 0.4971  data_time: 0.0564  memory: 2027  loss: 0.5541  loss_cls: 0.2301  loss_bbox: 0.2218  loss_mask: 0.1021
2023/06/11 11:56:07 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:56:10 - mmengine - INFO - Epoch(train) [34][ 5/16]  lr: 1.8307e-04  eta: 0:00:55  time: 0.4743  data_time: 0.0439  memory: 1718  loss: 0.5498  loss_cls: 0.2273  loss_bbox: 0.2204  loss_mask: 0.1020
2023/06/11 11:56:12 - mmengine - INFO - Epoch(train) [34][10/16]  lr: 1.7053e-04  eta: 0:00:52  time: 0.4727  data_time: 0.0438  memory: 1408  loss: 0.5666  loss_cls: 0.2381  loss_bbox: 0.2243  loss_mask: 0.1042
2023/06/11 11:56:14 - mmengine - INFO - Epoch(train) [34][15/16]  lr: 1.5838e-04  eta: 0:00:49  time: 0.4762  data_time: 0.0437  memory: 2382  loss: 0.5615  loss_cls: 0.2362  loss_bbox: 0.2236  loss_mask: 0.1017
2023/06/11 11:56:14 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:56:17 - mmengine - INFO - Epoch(train) [35][ 5/16]  lr: 1.4433e-04  eta: 0:00:46  time: 0.5019  data_time: 0.0492  memory: 1643  loss: 0.5703  loss_cls: 0.2389  loss_bbox: 0.2272  loss_mask: 0.1042
2023/06/11 11:56:22 - mmengine - INFO - Epoch(train) [35][10/16]  lr: 1.3311e-04  eta: 0:00:44  time: 0.5494  data_time: 0.0499  memory: 1753  loss: 0.5726  loss_cls: 0.2403  loss_bbox: 0.2269  loss_mask: 0.1054
2023/06/11 11:56:24 - mmengine - INFO - Epoch(train) [35][15/16]  lr: 1.2236e-04  eta: 0:00:41  time: 0.5545  data_time: 0.0504  memory: 1548  loss: 0.5700  loss_cls: 0.2375  loss_bbox: 0.2234  loss_mask: 0.1091
2023/06/11 11:56:24 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:56:24 - mmengine - INFO - Switch pipeline now!
2023/06/11 11:56:27 - mmengine - INFO - Epoch(train) [36][ 5/16]  lr: 1.1012e-04  eta: 0:00:38  time: 0.5261  data_time: 0.0468  memory: 1241  loss: 0.5462  loss_cls: 0.2311  loss_bbox: 0.2128  loss_mask: 0.1023
2023/06/11 11:56:28 - mmengine - INFO - Epoch(train) [36][10/16]  lr: 1.0050e-04  eta: 0:00:36  time: 0.4823  data_time: 0.0466  memory: 1538  loss: 0.5251  loss_cls: 0.2233  loss_bbox: 0.2055  loss_mask: 0.0962
2023/06/11 11:56:29 - mmengine - INFO - Epoch(train) [36][15/16]  lr: 9.1420e-05  eta: 0:00:33  time: 0.4462  data_time: 0.0463  memory: 1387  loss: 0.4982  loss_cls: 0.2174  loss_bbox: 0.1952  loss_mask: 0.0857
2023/06/11 11:56:29 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:56:31 - mmengine - INFO - Epoch(train) [37][ 5/16]  lr: 8.1282e-05  eta: 0:00:30  time: 0.4309  data_time: 0.0409  memory: 1481  loss: 0.4692  loss_cls: 0.2085  loss_bbox: 0.1838  loss_mask: 0.0769
2023/06/11 11:56:32 - mmengine - INFO - Epoch(train) [37][10/16]  lr: 7.3487e-05  eta: 0:00:27  time: 0.4129  data_time: 0.0408  memory: 1415  loss: 0.4493  loss_cls: 0.1998  loss_bbox: 0.1771  loss_mask: 0.0724
2023/06/11 11:56:33 - mmengine - INFO - Epoch(train) [37][15/16]  lr: 6.6305e-05  eta: 0:00:24  time: 0.3938  data_time: 0.0403  memory: 1131  loss: 0.4232  loss_cls: 0.1873  loss_bbox: 0.1692  loss_mask: 0.0667
2023/06/11 11:56:33 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:56:35 - mmengine - INFO - Epoch(train) [38][ 5/16]  lr: 5.8520e-05  eta: 0:00:21  time: 0.3784  data_time: 0.0358  memory: 1603  loss: 0.5039  loss_cls: 0.2828  loss_bbox: 0.1596  loss_mask: 0.0615
2023/06/11 11:56:36 - mmengine - INFO - Epoch(train) [38][10/16]  lr: 5.2746e-05  eta: 0:00:19  time: 0.3328  data_time: 0.0349  memory: 1213  loss: 0.4876  loss_cls: 0.2742  loss_bbox: 0.1551  loss_mask: 0.0583
2023/06/11 11:56:37 - mmengine - INFO - Epoch(train) [38][15/16]  lr: 4.7636e-05  eta: 0:00:16  time: 0.2775  data_time: 0.0339  memory: 1459  loss: 0.4647  loss_cls: 0.2677  loss_bbox: 0.1461  loss_mask: 0.0509
2023/06/11 11:56:37 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:56:41 - mmengine - INFO - Epoch(train) [39][ 5/16]  lr: 4.2396e-05  eta: 0:00:13  time: 0.2835  data_time: 0.0300  memory: 1258  loss: 0.4486  loss_cls: 0.2652  loss_bbox: 0.1417  loss_mask: 0.0416
2023/06/11 11:56:43 - mmengine - INFO - Epoch(train) [39][10/16]  lr: 3.8786e-05  eta: 0:00:10  time: 0.2987  data_time: 0.0306  memory: 1228  loss: 0.4445  loss_cls: 0.2623  loss_bbox: 0.1406  loss_mask: 0.0416
2023/06/11 11:56:44 - mmengine - INFO - Epoch(train) [39][15/16]  lr: 3.5873e-05  eta: 0:00:08  time: 0.3052  data_time: 0.0310  memory: 1208  loss: 0.4402  loss_cls: 0.2559  loss_bbox: 0.1415  loss_mask: 0.0428
2023/06/11 11:56:44 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:56:46 - mmengine - INFO - Epoch(train) [40][ 5/16]  lr: 3.3308e-05  eta: 0:00:05  time: 0.3212  data_time: 0.0346  memory: 1428  loss: 0.4466  loss_cls: 0.2597  loss_bbox: 0.1443  loss_mask: 0.0426
2023/06/11 11:56:48 - mmengine - INFO - Epoch(train) [40][10/16]  lr: 3.1951e-05  eta: 0:00:02  time: 0.3197  data_time: 0.0344  memory: 1427  loss: 0.4447  loss_cls: 0.2568  loss_bbox: 0.1454  loss_mask: 0.0425
2023/06/11 11:56:49 - mmengine - INFO - Epoch(train) [40][15/16]  lr: 3.1307e-05  eta: 0:00:00  time: 0.3155  data_time: 0.0342  memory: 1195  loss: 0.4463  loss_cls: 0.2577  loss_bbox: 0.1457  loss_mask: 0.0429
2023/06/11 11:56:49 - mmengine - INFO - Exp name: rtmdet-tiny_1xb12-40e_balloon_20230611_115039
2023/06/11 11:56:49 - mmengine - INFO - Saving checkpoint at 40 epochs
2023/06/11 11:56:57 - mmengine - INFO - Epoch(val) [40][ 5/13]    eta: 0:00:10  time: 0.7539  data_time: 0.0133  memory: 3197  
2023/06/11 11:56:59 - mmengine - INFO - Epoch(val) [40][10/13]    eta: 0:00:02  time: 0.7073  data_time: 0.0123  memory: 873  
2023/06/11 11:57:00 - mmengine - INFO - Evaluating bbox...
2023/06/11 11:57:00 - mmengine - INFO - bbox_mAP_copypaste: 0.703 0.828 0.775 0.013 0.584 0.794
2023/06/11 11:57:00 - mmengine - INFO - Evaluating segm...
2023/06/11 11:57:00 - mmengine - INFO - segm_mAP_copypaste: 0.583 0.675 0.627 0.003 0.238 0.737
2023/06/11 11:57:00 - mmengine - INFO - Epoch(val) [40][13/13]    coco/bbox_mAP: 0.7030  coco/bbox_mAP_50: 0.8280  coco/bbox_mAP_75: 0.7750  coco/bbox_mAP_s: 0.0130  coco/bbox_mAP_m: 0.5840  coco/bbox_mAP_l: 0.7940  coco/segm_mAP: 0.5830  coco/segm_mAP_50: 0.6750  coco/segm_mAP_75: 0.6270  coco/segm_mAP_s: 0.0030  coco/segm_mAP_m: 0.2380  coco/segm_mAP_l: 0.7370  data_time: 0.0059  time: 0.6711
2023/06/11 11:57:00 - mmengine - INFO - The previous best checkpoint /content/drive/MyDrive/OpenMMLab/workdir/rtmdet_tiny_balloon/best_coco_bbox_mAP_epoch_20.pth is removed
2023/06/11 11:57:02 - mmengine - INFO - The best checkpoint with 0.7030 coco/bbox_mAP at 40 epoch is saved to best_coco_bbox_mAP_epoch_40.pth.
